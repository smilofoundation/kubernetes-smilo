


apiVersion: v1
kind: Namespace
metadata:
  name: quorum-test
  labels:
    name: quorum-test

---
# kubectl create configmap game-config --from-file=configure-pod-container/dd1/key
apiVersion: v1
kind: ConfigMap
metadata:
  name: quorum-permissioned-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: quorum-permissioned-config
data:
  permissioned-nodes.json: |

    
    
    
    [
    
        
           "enode://054948a646edfe221ab2c9bc71ef87f618d91209026ccd355ed28a679312a234cdc6992f62d25f8fb9877ee4dd253687139bc37d2222cac2c864cbc174b76085@%QUORUM-NODE1_SERVICE_HOST%:21000",
    
    
        
           "enode://8fcebcbd7290cb40f69c4f87db5eca5fced2f5ef3b2f9a594a91eb105751dc033ca1dced66ac838be48210d5327378e5c5a6b224d12b96cdb44d0adb806458da@%QUORUM-NODE2_SERVICE_HOST%:21000",
    
    
        
           "enode://d29130f00d18c9f80aaa30613e1dbd06fd6c5190c3b2d83965d754113e7357ff12ac0058dc6e9926d584696af07de9ce81520fc1a60a0e33a72ba8aa64a2e613@%QUORUM-NODE3_SERVICE_HOST%:21000",
    
    
        
           "enode://c6656f1dab950f3fb7b7c803d714f7fc4b3db66c849da5e7eb3fff77f6d8186f42d05e30163575a87ce93c0ae198e63b1a36b7f90466944d3fb5e8e51f09f7a6@%QUORUM-NODE4_SERVICE_HOST%:21000",
    
    
        
           "enode://6b45a468cd62444ac7d708fa8da4dff998aa69889c207b05e6a26a49c0c1bc02bac8ada214e0e734cb6df2199cc3631a41d604c5455174ed612b6fcf915d542d@%QUORUM-NODE5_SERVICE_HOST%:21000",
    
    
        
           "enode://2a895c37f25c80f2b83983993bf3a5438003fe8de5b70322cc73e10ed52adb38e7ba6cd3c45e52d199651a7b6c6371982a5fa7a45f67cc1e3d6e862cb98b5f1f@%QUORUM-NODE6_SERVICE_HOST%:21000",
    
    
        
           "enode://dcfa3c83d2a949bfa840e63a4f474d9da385ab872c2da1636e801f5820ab1f669eaa2bd2c5bbd0151fa6a30ab6b24f2a1369624c61e53718f0d7ea7fec0406c1@%QUORUM-NODE7_SERVICE_HOST%:21000"
    
    ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: genesis-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: genesis-config
data:
  genesis-geth.json: |-
    
    
    {
    "alloc": {
      },
      "coinbase": "0x0000000000000000000000000000000000000000",
      "config": {
        "byzantiumBlock": 1,
        "eip150block": 2,
        "eip150hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "eip155block": 0,
        "eip158block": 3,
        "petersburgBlock": 4,
        "constantinopleBlock": 5,
        "sport": {
          "epoch": 30000,
          "policy": 0,
          "minfunds": 20000
        },
        "chainId": 10,
        "isSmilo":true,
        "isGas": true,
        "isGasRefunded": true,
        "required_min_funds": 1
      },
    
    
      "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000f8d9f8939445f25bed343c683bf432d13efe47e332d5998a8694e379246407680fceb385398ccd970dd53bb05063947de80c0eea4a9edd1ea14a61b07f7255cc71b93b9403352dc1c97aafe755845b80ac7fc9aeaa137ab094bc64965c360a9f3ebd37533a3aea34155bffcae494c9e6be65b5f2b4203d05a171bb1775b986be9c1b944fde1e4ee83772b59e7f7dca2e6a7825d3e51e34b8410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0",
      "gasLimit": "0x47b760",
      "difficulty": "0x1",
      "mixHash": "0x636861696e20706c6174666f726d2077697468206120636f6e736369656e6365",
      "nonce": "0x0",
      "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "timestamp": "0x00"
    }
    

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tessera-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: tessera-config
data:
  tessera-config.json.tmpl: |-
    
    

    {
        "useWhiteList": false,
        "server": {
            "port": 9001,
            "hostName": "http://%THIS_SERVICE_HOST%",
            "hostaddr": "0.0.0.0",
            "sslConfig": {
                "tls": "OFF",
                "generateKeyStoreIfNotExisted": true,
                "serverKeyStore": "/etc/quorum/qdata/tm/server-keystore",
                "serverKeyStorePassword": "smilo",
                "serverTrustStore": "/etc/quorum/qdata/tm/server-truststore",
                "serverTrustStorePassword": "smilo",
                "serverTrustMode": "TOFU",
                "knownClientsFile": "/etc/quorum/qdata/tm/knownClients",
                "clientKeyStore": "/etc/quorum/qdata/tm/client-keystore",
                "clientKeyStorePassword": "smilo",
                "clientTrustStore": "/etc/quorum/qdata/tm/client-truststore",
                "clientTrustStorePassword": "smilo",
                "clientTrustMode": "TOFU",
                "knownServersFile": "/etc/quorum/qdata/tm/knownServers"
            }
        },
        "peer": [
    
             {
               "url": "http://%QUORUM-NODE1_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE2_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE3_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE4_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE5_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE6_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE7_SERVICE_HOST%:9001"
             }
    
        ],
        "keys": {
            "passwords": [],
            "keyData": [
                {
                    "config": "/etc/quorum/qdata/tm/tm.key",
                    "publicKey": "/etc/quorum/qdata/tm/tm.pub"
                }
            ]
        },
        "alwaysSendTo": [],
        "socket": "/etc/quorum/qdata/tm/tm.ipc",
        "dbfile": "/etc/quorum/qdata/tm/blackbox.db",
        "peersdbfile": "/etc/quorum/qdata/tm/blackbox-peers.db"
    }
    

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contracts-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: contracts-config
data:
  runscript.sh: |-
    #!/bin/ash
    PRIVATE_CONFIG=$TM_HOME/tm.ipc geth --exec "loadScript(\"$1\")" attach ipc:$QUORUM_HOME/dd/geth.ipc
# set the tm.pub for node2 in the privateFor field.
# assumes that at least 2 nodes are being deployed.
  private_contract.js: |-

    a = eth.accounts[0]
    web3.eth.defaultAccount = a;
    
    // abi and bytecode generated from simplestorage.sol:
    // > solcjs --bin --abi simplestorage.sol
    var abi = [{"constant":true,"inputs":[],"name":"storedData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"retVal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"initVal","type":"uint256"}],"payable":false,"type":"constructor"}];
    
    var bytecode = "0x6060604052341561000f57600080fd5b604051602080610149833981016040528080519060200190919050505b806000819055505b505b610104806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a1afcd914605157806360fe47b11460775780636d4ce63c146097575b600080fd5b3415605b57600080fd5b606160bd565b6040518082815260200191505060405180910390f35b3415608157600080fd5b6095600480803590602001909190505060c3565b005b341560a157600080fd5b60a760ce565b6040518082815260200191505060405180910390f35b60005481565b806000819055505b50565b6000805490505b905600a165627a7a72305820d5851baab720bba574474de3d09dbeaabc674a15f4dd93b974908476542c23f00029";
    
    var simpleContract = web3.eth.contract(abi);
    var simple = simpleContract.new(42, {from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760, sharedWith: ["eZ4zW6N+moh8PIZj8mvc1S2uQoqeEZnux+B0DFe0x3w="]}, function(e, contract) {
    	if (e) {
    		console.log("err creating contract", e);
    	} else {
    		if (!contract.address) {
    			console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
    		} else {
    			console.log("Contract mined! Address: " + contract.address);
    			console.log(contract);
    		}
    	}
    });
  public_contract.js: |-
    a = eth.accounts[0]
    web3.eth.defaultAccount = a;
    
    // abi and bytecode generated from simplestorage.sol:
    // > solcjs --bin --abi simplestorage.sol
    var abi = [{"constant":true,"inputs":[],"name":"storedData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"retVal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"initVal","type":"uint256"}],"payable":false,"type":"constructor"}];
    
    var bytecode = "0x6060604052341561000f57600080fd5b604051602080610149833981016040528080519060200190919050505b806000819055505b505b610104806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a1afcd914605157806360fe47b11460775780636d4ce63c146097575b600080fd5b3415605b57600080fd5b606160bd565b6040518082815260200191505060405180910390f35b3415608157600080fd5b6095600480803590602001909190505060c3565b005b341560a157600080fd5b60a760ce565b6040518082815260200191505060405180910390f35b60005481565b806000819055505b50565b6000805490505b905600a165627a7a72305820d5851baab720bba574474de3d09dbeaabc674a15f4dd93b974908476542c23f00029";
    
    var simpleContract = web3.eth.contract(abi);
    var simple = simpleContract.new(42, {from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760}, function(e, contract) {
            if (e) {
                    console.log("err creating contract", e);
            } else {
                    if (!contract.address) {
                            console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
                    } else {
                            console.log("Contract mined! Address: " + contract.address);
                            console.log(contract);
                    }
            }
    });
