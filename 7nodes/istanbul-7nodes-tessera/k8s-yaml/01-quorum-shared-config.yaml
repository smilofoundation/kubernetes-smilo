


apiVersion: v1
kind: Namespace
metadata:
  name: quorum-test
  labels:
    name: quorum-test

---
# kubectl create configmap game-config --from-file=configure-pod-container/dd1/key
apiVersion: v1
kind: ConfigMap
metadata:
  name: quorum-permissioned-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: quorum-permissioned-config
data:
  permissioned-nodes.json: |

    
    
    
    [
    
        
           "enode://6ccba0a9573971c0041f7c6aa0902d5813f690b0c6cb92ba7e41303f3ed9be41fd3ef786ae2f16d09fd47ef2063b4703a3595ae728dc231bb6b1e999967cda8f@%QUORUM-NODE1_SERVICE_HOST%:21000",
    
    
        
           "enode://0ab9f4fbf8d3775422392bbb531d8fabd5adee6eebb102463ad531090d1714ef07f19e56bbea643e1e549ec9ad869f7b80225d8210a2eed31b2600361682bfd2@%QUORUM-NODE2_SERVICE_HOST%:21000",
    
    
        
           "enode://4115244d00f53dbebd87c213d492de2532ddda96ca22acc9aee4fb68f817f2f1e0d0dc564bdde65ffea95c01cc9e7dc5798cdeef5301b1d7bc98636075f27a66@%QUORUM-NODE3_SERVICE_HOST%:21000",
    
    
        
           "enode://b74378d132787865e88a06ab4947a65ca2b8bff4f75e3ed163ead250ee3bf39ce77042b0659458491b18e7a57e1a1ab6e6db7d3ea6e224937f2bb990af3a5aa4@%QUORUM-NODE4_SERVICE_HOST%:21000",
    
    
        
           "enode://7b324a686fa0d01f37cc34c917ddf34811e6b663c1e843fdec7176d81d722c9d72e55af2bca869d32b41575f80bcd9662546d10fe5d0a105b4d19aa0adf3b3d8@%QUORUM-NODE5_SERVICE_HOST%:21000",
    
    
        
           "enode://31e01b5d59cd0d61ff567545b0c9ed5f129410053e6b1c608b126b184857f56f6cec3befc36472c23a93e6bbb5e9ca2367c3615835a16e2e537f7e28193a2034@%QUORUM-NODE6_SERVICE_HOST%:21000",
    
    
        
           "enode://60e3282c5a896cca8210837ca1aae62e4ff8f53f826015954a5b07fdf4d6c63b58f15e066e4d71d745c67de8b84ea72ac477475f35d77e589bf4dc9cee368baa@%QUORUM-NODE7_SERVICE_HOST%:21000"
    
    ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: genesis-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: genesis-config
data:
  genesis-geth.json: |-
    
    
    {
    "alloc": {
      },
      "coinbase": "0x0000000000000000000000000000000000000000",
      "config": {
        "byzantiumBlock": 1,
        "eip150block": 2,
        "eip150hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "eip155block": 0,
        "eip158block": 3,
        "petersburgBlock": 4,
        "constantinopleBlock": 5,
        "sport": {
          "epoch": 30000,
          "policy": 0,
          "minfunds": 20000
        },
        "chainId": 10,
        "isSmilo":true,
        "isGas": true,
        "isGasRefunded": true,
        "required_min_funds": 1
      },
    
    
      "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000f8d9f8939422ec64a8dec7c56f219772e6e640e413b9729262947feec4ed303855a2d303822a4d0b420e6b80340f945d9511d7dd970ba96308d6a88f5825b5f37c358894f7a404066d3d34c13888438f60e914b9171cf966947bdc39d578e69e0ddda7f12a7ac9bdcebe98e4d09409682f94653c8fb8e11efccd4c3f84eacdb28e76946948112a6d49ed63551396984e7035bc6754d2feb8410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0",
      "gasLimit": "0x47b760",
      "difficulty": "0x1",
      "mixHash": "0x636861696e20706c6174666f726d2077697468206120636f6e736369656e6365",
      "nonce": "0x0",
      "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "timestamp": "0x00"
    }
    

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tessera-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: tessera-config
data:
  tessera-config.json.tmpl: |-
    
    
    
    {
        "useWhiteList": false,
        "server": {
            "port": 9001,
            "hostName": "http://%THIS_SERVICE_HOST%",
            "hostaddr": "0.0.0.0",
            "sslConfig": {
                "tls": "OFF",
                "generateKeyStoreIfNotExisted": true,
                "serverKeyStore": "/etc/quorum/qdata/tm/server-keystore",
                "serverKeyStorePassword": "smilo",
                "serverTrustStore": "/etc/quorum/qdata/tm/server-truststore",
                "serverTrustStorePassword": "smilo",
                "serverTrustMode": "TOFU",
                "knownClientsFile": "/etc/quorum/qdata/tm/knownClients",
                "clientKeyStore": "/etc/quorum/qdata/tm/client-keystore",
                "clientKeyStorePassword": "smilo",
                "clientTrustStore": "/etc/quorum/qdata/tm/client-truststore",
                "clientTrustStorePassword": "smilo",
                "clientTrustMode": "TOFU",
                "knownServersFile": "/etc/quorum/qdata/tm/knownServers"
            }
        },
        "peer": [
    
             {
               "url": "http://%QUORUM-NODE1_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE2_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE3_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE4_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE5_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE6_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE7_SERVICE_HOST%:9001"
             }
    
        ],
        "keys": {
            "passwords": [],
            "keyData": [
                {
                    "config": "/etc/quorum/qdata/tm/tm.key",
                    "publicKey": "/etc/quorum/qdata/tm/tm.pub"
                }
            ]
        },
        "alwaysSendTo": [],
        "socket": "/etc/quorum/qdata/tm/tm.ipc",
        "dbfile": "/etc/quorum/qdata/tm/blackbox.db",
        "peersdbfile": "/etc/quorum/qdata/tm/blackbox-peers.db"
    }
    

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contracts-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: contracts-config
data:
  runscript.sh: |-
    #!/bin/ash
    PRIVATE_CONFIG=$TM_HOME/tm.ipc geth --exec "loadScript(\"$1\")" attach ipc:$QUORUM_HOME/dd/geth.ipc
# set the tm.pub for node2 in the privateFor field.
# assumes that at least 2 nodes are being deployed.
  private_contract.js: |-

    a = eth.accounts[0]
    web3.eth.defaultAccount = a;
    
    // abi and bytecode generated from simplestorage.sol:
    // > solcjs --bin --abi simplestorage.sol
    var abi = [{"constant":true,"inputs":[],"name":"storedData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"retVal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"initVal","type":"uint256"}],"payable":false,"type":"constructor"}];
    
    var bytecode = "0x6060604052341561000f57600080fd5b604051602080610149833981016040528080519060200190919050505b806000819055505b505b610104806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a1afcd914605157806360fe47b11460775780636d4ce63c146097575b600080fd5b3415605b57600080fd5b606160bd565b6040518082815260200191505060405180910390f35b3415608157600080fd5b6095600480803590602001909190505060c3565b005b341560a157600080fd5b60a760ce565b6040518082815260200191505060405180910390f35b60005481565b806000819055505b50565b6000805490505b905600a165627a7a72305820d5851baab720bba574474de3d09dbeaabc674a15f4dd93b974908476542c23f00029";
    
    var simpleContract = web3.eth.contract(abi);
    var simple = simpleContract.new(42, {from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760, sharedWith: ["4bo0nA4vuchdcdvb60CADSWW+WBInESifRMsX/gmdyI="]}, function(e, contract) {
    	if (e) {
    		console.log("err creating contract", e);
    	} else {
    		if (!contract.address) {
    			console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
    		} else {
    			console.log("Contract mined! Address: " + contract.address);
    			console.log(contract);
    		}
    	}
    });
  public_contract.js: |-
    a = eth.accounts[0]
    web3.eth.defaultAccount = a;
    
    // abi and bytecode generated from simplestorage.sol:
    // > solcjs --bin --abi simplestorage.sol
    var abi = [{"constant":true,"inputs":[],"name":"storedData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"retVal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"initVal","type":"uint256"}],"payable":false,"type":"constructor"}];
    
    var bytecode = "0x6060604052341561000f57600080fd5b604051602080610149833981016040528080519060200190919050505b806000819055505b505b610104806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a1afcd914605157806360fe47b11460775780636d4ce63c146097575b600080fd5b3415605b57600080fd5b606160bd565b6040518082815260200191505060405180910390f35b3415608157600080fd5b6095600480803590602001909190505060c3565b005b341560a157600080fd5b60a760ce565b6040518082815260200191505060405180910390f35b60005481565b806000819055505b50565b6000805490505b905600a165627a7a72305820d5851baab720bba574474de3d09dbeaabc674a15f4dd93b974908476542c23f00029";
    
    var simpleContract = web3.eth.contract(abi);
    var simple = simpleContract.new(42, {from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760}, function(e, contract) {
            if (e) {
                    console.log("err creating contract", e);
            } else {
                    if (!contract.address) {
                            console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
                    } else {
                            console.log("Contract mined! Address: " + contract.address);
                            console.log(contract);
                    }
            }
    });
