


apiVersion: v1
kind: Namespace
metadata:
  name: smilo-test
  labels:
    name: smilo-test

---
# kubectl create configmap game-config --from-file=configure-pod-container/dd1/key
apiVersion: v1
kind: ConfigMap
metadata:
  name: smilo-permissioned-config
  namespace: smilo-test
  labels:
    app: kubernetes-smilo
    name: smilo-permissioned-config
data:
  permissioned-nodes.json: |

    
    
    
    [
    
        
           "enode://db278ac595b08c2f1141835f737f6dbb618fdd87f47ec29f543856a1c91a375e74262277d2649d05f8dc2a040ce72e7761396c2a329ffd8f99ff8127604e3036@%SMILO-NODE1_SERVICE_HOST%:21000",
    
    
        
           "enode://129eefda122436fbaa48d4e011ecf97cb3fc92151341494b120267e752c4b7cafe7206755a408adab57f54eceb547b159551d3064234dea7fccd7f58451cdac5@%SMILO-NODE2_SERVICE_HOST%:21000",
    
    
        
           "enode://02480aa7949e9a7c16d8f5d61ee40d45f388d320ad84a068ee600b0bee64d4fce3376365953a935fc115f46525384bc12cca957e7de8a606ac7bad1c954dc35e@%SMILO-NODE3_SERVICE_HOST%:21000",
    
    
        
           "enode://3145b8df8373d9ad8858e0409272ec65223db6f9a97a8d061cb3ed2c242b254d37a06be117d4f0bc9907e32cd08ff20646c749f5071bf86679860cc07145fe28@%SMILO-NODE4_SERVICE_HOST%:21000",
    
    
        
           "enode://2dac12f76ce1ca753ac3fb6c6226583cec9ee4dfa3b9f5c85c4cc5f05aeba629f8259c74a816519f2b5a908116eb42a21474a124effb9a1adc7d675414167130@%SMILO-NODE5_SERVICE_HOST%:21000",
    
    
        
           "enode://033b5248d6d52be088d8e633640aac5cbd49694f6534a1a54003f064603d43262b671c0a5e73ca94beb8fdca099eb8e3d2b8f56fda3e5337acfca7514f5e13b8@%SMILO-NODE6_SERVICE_HOST%:21000",
    
    
        
           "enode://d55e928d77f224a9790332a42a91680390b1ef7397d32dc4516aac293aceb383be737893dd7c52506866bb9edfe0915e41e13d9609c356f9729153483561d367@%SMILO-NODE7_SERVICE_HOST%:21000"
    
    ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: genesis-config
  namespace: smilo-test
  labels:
    app: kubernetes-smilo
    name: genesis-config
data:
  genesis-geth.json: |-
    
    
    {
    "alloc": {
      },
      "coinbase": "0x0000000000000000000000000000000000000000",
      "config": {
        "byzantiumBlock": 1,
        "eip150block": 2,
        "eip150hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "eip155block": 0,
        "eip158block": 3,
        "petersburgBlock": 4,
        "constantinopleBlock": 5,
        "sport": {
          "epoch": 30000,
          "policy": 0,
          "minfunds": 20000
        },
        "chainId": 10,
        "isSmilo":true,
        "isGas": true,
        "isGasRefunded": true,
        "required_min_funds": 1
      },
    
    
      "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000f8d9f893945479a6edd4fddeb099c7d3a44da3e7363415c5d6943f71b7aac8437ace8e065bb973859bd2c09a808e945445fb5701dc05ac59495645319a2b9004f680be94c51445629b95c272f021d9ee5a567cb8a4a8f8ab9449b94ee08ce0d6a8e08a18ee54440718ae4b094d94197e60ac2b838b0e2cf54f1a5b75f3157097b57c94369c075ffe7f22085816662fa919646c08a9f913b8410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0",
      "gasLimit": "0x47b760",
      "difficulty": "0x1",
      "mixHash": "0x636861696e20706c6174666f726d2077697468206120636f6e736369656e6365",
      "nonce": "0x0",
      "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "timestamp": "0x00"
    }
    

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: blackbox-config
  namespace: smilo-test
  labels:
    app: kubernetes-smilo
    name: blackbox-config
data:
  blackbox-config.json.tmpl: |-
    
    
    
    {
        "useWhiteList": false,
        "server": {
            "port": 9001,
            "hostName": "http://%THIS_SERVICE_HOST%",
            "hostaddr": "0.0.0.0",
            "sslConfig": {
                "tls": "OFF",
                "generateKeyStoreIfNotExisted": true,
                "serverKeyStore": "/etc/smilo/sdata/tm/server-keystore",
                "serverKeyStorePassword": "smilo",
                "serverTrustStore": "/etc/smilo/sdata/tm/server-truststore",
                "serverTrustStorePassword": "smilo",
                "serverTrustMode": "TOFU",
                "knownClientsFile": "/etc/smilo/sdata/tm/knownClients",
                "clientKeyStore": "/etc/smilo/sdata/tm/client-keystore",
                "clientKeyStorePassword": "smilo",
                "clientTrustStore": "/etc/smilo/sdata/tm/client-truststore",
                "clientTrustStorePassword": "smilo",
                "clientTrustMode": "TOFU",
                "knownServersFile": "/etc/smilo/sdata/tm/knownServers"
            }
        },
        "peer": [
    
             {
               "url": "http://%SMILO-NODE1_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%SMILO-NODE2_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%SMILO-NODE3_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%SMILO-NODE4_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%SMILO-NODE5_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%SMILO-NODE6_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%SMILO-NODE7_SERVICE_HOST%:9001"
             }
    
        ],
        "keys": {
            "passwords": [],
            "keyData": [
                {
                    "config": "/etc/smilo/sdata/tm/tm.key",
                    "publicKey": "/etc/smilo/sdata/tm/tm.pub"
                }
            ]
        },
        "alwaysSendTo": [],
        "socket": "/etc/smilo/sdata/tm/tm.ipc",
        "dbfile": "/etc/smilo/sdata/tm/blackbox.db",
        "peersdbfile": "/etc/smilo/sdata/tm/blackbox-peers.db"
    }
    

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contracts-config
  namespace: smilo-test
  labels:
    app: kubernetes-smilo
    name: contracts-config
data:
  runscript.sh: |-
    #!/bin/ash
    PRIVATE_CONFIG=$TM_HOME/tm.ipc geth --exec "loadScript(\"$1\")" attach ipc:$SMILO_HOME/dd/geth.ipc
# set the tm.pub for node2 in the privateFor field.
# assumes that at least 2 nodes are being deployed.
  private_contract.js: |-

    a = eth.accounts[0]
    web3.eth.defaultAccount = a;
    
    // abi and bytecode generated from simplestorage.sol:
    // > solcjs --bin --abi simplestorage.sol
    var abi = [{"constant":true,"inputs":[],"name":"storedData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"retVal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"initVal","type":"uint256"}],"payable":false,"type":"constructor"}];
    
    var bytecode = "0x6060604052341561000f57600080fd5b604051602080610149833981016040528080519060200190919050505b806000819055505b505b610104806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a1afcd914605157806360fe47b11460775780636d4ce63c146097575b600080fd5b3415605b57600080fd5b606160bd565b6040518082815260200191505060405180910390f35b3415608157600080fd5b6095600480803590602001909190505060c3565b005b341560a157600080fd5b60a760ce565b6040518082815260200191505060405180910390f35b60005481565b806000819055505b50565b6000805490505b905600a165627a7a72305820d5851baab720bba574474de3d09dbeaabc674a15f4dd93b974908476542c23f00029";
    
    var simpleContract = web3.eth.contract(abi);
    var simple = simpleContract.new(42, {from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760, gasPrice:0, sharedWith: ["JvMmCGTlrrdt4YcPVRMSCl989KvwzJtaV+xT1XfP9kw="]}, function(e, contract) {
    	if (e) {
    		console.log("err creating contract", e);
    	} else {
    		if (!contract.address) {
    			console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
    		} else {
    			console.log("Contract mined! Address: " + contract.address);
    			console.log(contract);
    		}
    	}
    });
  public_contract.js: |-
    a = eth.accounts[0]
    web3.eth.defaultAccount = a;
    
    // abi and bytecode generated from simplestorage.sol:
    // > solcjs --bin --abi simplestorage.sol
    var abi = [{"constant":true,"inputs":[],"name":"storedData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"retVal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"initVal","type":"uint256"}],"payable":false,"type":"constructor"}];
    
    var bytecode = "0x6060604052341561000f57600080fd5b604051602080610149833981016040528080519060200190919050505b806000819055505b505b610104806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a1afcd914605157806360fe47b11460775780636d4ce63c146097575b600080fd5b3415605b57600080fd5b606160bd565b6040518082815260200191505060405180910390f35b3415608157600080fd5b6095600480803590602001909190505060c3565b005b341560a157600080fd5b60a760ce565b6040518082815260200191505060405180910390f35b60005481565b806000819055505b50565b6000805490505b905600a165627a7a72305820d5851baab720bba574474de3d09dbeaabc674a15f4dd93b974908476542c23f00029";
    
    var simpleContract = web3.eth.contract(abi);
    var simple = simpleContract.new(42, {from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760, gasPrice:0}, function(e, contract) {
            if (e) {
                    console.log("err creating contract", e);
            } else {
                    if (!contract.address) {
                            console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
                    } else {
                            console.log("Contract mined! Address: " + contract.address);
                            console.log(contract);
                    }
            }
    });
